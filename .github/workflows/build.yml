# The reason this is so complicated is because github actions cache for docker
# build doesn't seem to work as well as it should. Ideally it just caches the
# work it has done before but I couldn't get this to work with much trying.
# So we manually compute the hash of the files which the base docker image layer
# depends upon and use this to tag images. If for some reason at some point
# the github actions docker cache works more efficiently, we can simplyify.

# The goals are:
# - reproducible builds
# - fast tests
# - fast deployments
name: build

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"

permissions:
  contents: read  # To check out code
  packages: write # To push to GitHub Container Registry

jobs:
  build-production-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build production image
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          target: prod
          context: .
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/blot
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/blot,mode=max
          tags: ghcr.io/${{ github.repository_owner }}/blot:${{ github.sha }}

      - name: Verify built-in health check
        env:
          IMAGE: ghcr.io/${{ github.repository_owner }}/blot:${{ github.sha }}
        run: |
          docker network create test_network

          # Start a Redis container
          redis_container_id=$(docker run -d --name test_redis --network test_network redis:latest)

          # Ensure Redis started successfully
          if [ -z "$redis_container_id" ]; then
            echo "Failed to start the Redis container. Exiting..."
            exit 1
          fi

          echo "Waiting for Redis ($redis_container_id) to become ready..."
          timeout=30
          interval=2
          elapsed=0
          while ! docker exec $redis_container_id redis-cli ping | grep -q PONG; do
            if [ $elapsed -ge $timeout ]; then
              echo "Redis did not become ready within $timeout seconds. Exiting..."
              docker stop $redis_container_id
              docker rm $redis_container_id
              exit 1
            fi
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          echo "Redis is ready."

          # Start the app container with Redis environment variables
          container_id=$(docker run -d --network test_network --env BLOT_REDIS_HOST=test_redis -p 8080:8080 $IMAGE)

          # Ensure the app container started successfully
          if [ -z "$container_id" ]; then
            echo "Failed to start the app container. Exiting..."
            docker stop $redis_container_id
            docker rm $redis_container_id
            exit 1
          fi

          echo "Waiting for the app container ($container_id) to pass the built-in health check..."

          # Wait for the app container's health status to become "healthy"
          timeout=60
          interval=5
          elapsed=0
          while [ "$(docker inspect --format='{{json .State.Health.Status}}' $container_id)" != '"healthy"' ]; do
            if [ $elapsed -ge $timeout ]; then
              echo "Health check failed: app container did not become healthy within $timeout seconds."

              echo "Final log contents:"
              docker logs $container_id
              docker stop $container_id
              docker rm $container_id
              docker stop $redis_container_id
              docker rm $redis_container_id
              exit 1
            fi
            sleep $interval
            elapsed=$((elapsed + interval))
          done

          echo "App container passed the health check."

          # Clean up
          docker stop $container_id
          docker rm $container_id
          docker stop $redis_container_id
          docker rm $redis_container_id