{{> initial.conf}}

http {

    {{> http.conf}}

    # some weird requests with missing hosts in the log that take ages to respond
    map $http_host $missing_host {
        ""      1;
        default 0;
    }

    # bots
    map $http_user_agent $bad_bot {
        default 0;
        # Scraper libraries and automation tools
        ~*(?i)(axios|wget|okhttp|jsdom|phantomjs|headless|selenium|webdriver) 1;
        ~*(?i)(playwright|puppeteer|cypress|watir|mechanize) 1;
        ~*(?i)(aoihttp|curl|Faraday|Go-http-client|hackney|http.rb|python-httpx|python-requests|Python-urllib) 1;
        
        # AI and specialized bots
        ~*(?i)(anthropic-ai|Timpibot|ClaudeBot|Claude-Web|^AIBOT|^BunnySlippers|^Cegbfeieh|^CheeseBot) 1;
        
        # Common crawlers and SEO tools
        ~*(?i)(SemrushBot|Semrush|AhrefsBot|MJ12bot|YandexBot|YandexImages) 1;
        ~*(?i)(MegaIndex\.ru|BLEXbot|BLEXBot|ZoominfoBot|YaK|VelenPublicWebCrawler) 1;
        ~*(?i)(SentiBot|Vagabondo|SEOkicks|SEOkicks-Robot|mtbot/1\.1\.0i|SeznamBot) 1;
        ~*(?i)(DotBot|Cliqzbot|coccocbot|SiteCheck-sitecrawl|MauiBot|GumGum) 1;
        ~*(?i)(Clickagy|AspiegelBot|Yandex|TkBot|CCBot|Qwantify|MBCrawler) 1;
        ~*(?i)(serpstatbot|AwarioSmartBot|Semantici|ScholarBot|proximic|MojeekBot) 1;
        ~*(?i)(GrapeshotCrawler|IAScrawler|linkdexbot|contxbot|PlurkBot|PaperLiBot) 1;
        ~*(?i)(BomboraBot|Leikibot|weborama-fetcher|NTENTbot) 1;
        
        # Content and advertising bots
        ~*(?i)(admantx-usaspb|Eyeotabot|VoluumDSP-content-bot|SirdataBot|adbeat_bot) 1;
        ~*(?i)(TTD-Content|admantx|Nimbostratus-Bot|Mail\.RU_Bot|Quantcastboti) 1;
        ~*(?i)(Onespot-ScraperBot|Taboolabot|Baidu|Jobboerse|VoilaBot|Sogou) 1;
        
        # More scrapers and collectors
        ~*(?i)(Jyxobot|Exabot|ZGrab|Proximi|Sosospider|Accoona|aiHitBot|Genieo|Thinkbot) 1;
        ~*(?i)(BecomeBot|ConveraCrawler|NerdyBot|OutclicksBot|findlinks|JikeSpider) 1;
        ~*(?i)(Gigabot|CatchBot|Huaweisymantecspider|SiteSnagger|DataForSEO|Amazonbot) 1;
        ~*(?i)(TeleportPro|WebCopier|WebReaper|WebStripper|WebZIP|Xaldon_WebSpider|petalbot) 1;
        
        # Malicious bots and tools
        ~*(?i)(BackDoorBot|AITCSRoboti|Arachnophilia|BackRub|BlowFishi|perl) 1;
        ~*(?i)(CherryPicker|CyberSpyder|EmailCollector|Foobot|GetURL|httplib) 1;
        ~*(?i)(HTTrack|LinkScan|Openbot|Snooper|SuperBot|URLSpiderPro|MAZBot) 1;
        
        # Social media and content aggregators
        ~*(?i)(EchoboxBot|SerendeputyBot|LivelapBot|linkfluence) 1;
        ~*(?i)(TweetmemeBot|LinkisBot|CrowdTanglebot) 1;
        
        # Python and generic scraping
        ~*(?i)(python|Scrap) 1;
        
        # Empty or missing User-Agent
        ~*(^-$|^$) 1;
    }

    # blot subdomains (e.g. david.blot.im)
    server {
        listen 80;
        listen 443 ssl;
        
        {{^disable_http2}}
        http2 on;
        {{/disable_http2}}

        # match all subdomains of blot.im which do not start with preview-
        # e.g. blog-on-david.blot.im
        server_name "~^(?!preview-)[^.]+\.{{host}}$";
        
        {{> restrict-bot-uas.conf}}
        
        {{> wildcard-ssl.conf}}

        {{> blot-blogs.conf}}
    }

    # preview subdomains (e.g. preview-of-blog-on-david.blot.im)
    # these skip the cache and are passed directly to node
    server {
        listen 80;
        listen 443 ssl;
        
        {{^disable_http2}}
        http2 on;
        {{/disable_http2}}

        server_name "~^preview-[^.]+\.{{host}}$";

        {{> restrict-bot-uas.conf}}

        {{> wildcard-ssl.conf}}
        
        location / {
            set $upstream_server blot_blogs_node;
            {{> reverse-proxy.conf}}
        }
    }

    # cdn subdomain (e.g. cdn.blot.im)
    # these skip the cache and are passed directly to node
    server {
        listen 80;
        listen 443 ssl;

        {{^disable_http2}}
        http2 on;
        {{/disable_http2}}

        server_name cdn.{{host}};

        {{> wildcard-ssl.conf}}

        location = / {
            return 301 https://blot.im;
        }

        location / {
            set $upstream_server blot_node;
            {{> reverse-proxy.conf}}
        }
    }

    # blot.im
    server {
        listen 443 ssl;
        
        {{^disable_http2}}
        http2 on;
        {{/disable_http2}}

        server_name {{host}}; 

        {{> restrict-bot-uas.conf}}
        
        {{> wildcard-ssl.conf}}

        {{> blot-site.conf}}
    }

    # webhooks relay at webhooks.blot.im
    server {
        listen 443 ssl;
        {{^disable_http2}}
        http2 on;
        {{/disable_http2}}
        server_name webhooks.{{host}}; 

        {{> auto-ssl.conf}}

        location / {
            # the icloud relay needs to handle large file uploads
            client_max_body_size {{webhooks_client_max_body_size}};

            # IMPORTANT – we only send webhook relay requests to one
            # upstream (the master node - blot-container-green) because
            # it has an inmemory dictionary of connected clients – if
            # you have multiple upstreams, it doesn't work – 
            # DO NOT replace with http://blot_node
            proxy_pass http://127.0.0.1:8089;

            proxy_read_timeout 24h;
            proxy_send_timeout 24h;
            proxy_connect_timeout 24h;

            # SSE-specific configurations
            proxy_http_version 1.1;      # SSE requires HTTP/1.1
            proxy_set_header Connection '';  # Disable keep-alive
            proxy_buffering off;         # Disable response buffering
            proxy_cache off;             # Ensure no caching

            # generic
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;        
        }
    }

    # custom domains
    server {
        listen 80 default_server;
        listen 443 ssl default_server;
        {{^disable_http2}}
        http2 on;
        {{/disable_http2}}

        {{> restrict-bot-uas.conf}}
                
        if ($missing_host) {
            return 403;
        }

        {{> auto-ssl.conf}}
        {{> blot-blogs.conf}}
    }    

    # redirect blot.im over HTTP to HTTPS
    server {
        listen 80;
        server_name {{host}}; 
        return 301 https://$host$request_uri;
    }

    # internal server for inspecting and purging the cache
    server {
       listen 127.0.0.1:80;
        {{#openresty_instance_private_ip}}
        # needed by the node application running inside docker
        # which doesn't have access to the host network
        # this seems to cause errors for custom domains
        # and overrides the default server
        listen {{openresty_instance_private_ip}}:8077;
        {{/openresty_instance_private_ip}}
            
        location = /inspect {
            content_by_lua_block {
                cacher:inspect(ngx)
            }
        }

        location = /rehydrate {
            content_by_lua_block {
                local message = cacher:rehydrate(ngx)
                ngx.say(message)
            }
        }

        location = /purge {
            content_by_lua_block {
                cacher:purge(ngx)
            }
        }

        # otherwise, return 404
        location / {
            return 404;
        }
    }
}